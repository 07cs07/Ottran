{"name":"Ottran","tagline":"ஒற்றன்(Ottran) allows you to find the size and type of a remote image by downloading as little as possible. Supports PNG, GIF, JPEG and BMP.","body":"**ஒற்றன் - Ottran** [Tamil](http://en.wikipedia.org/wiki/Tamil_language) meaning of Scout\r\n\r\n**Ottran** is a Objective C implementation of [ImageScout](https://github.com/kaishin/ImageScout), which works in swift too.\r\nIt allows you to find the size and type of a remote image by downloading as little as possible. Now supports `PNG`, `JPEG`, `GIF` & `BMP`\r\n\r\n#### Why?\r\n\r\nSometimes you need to know the size of a remote image before downloading it, such as\r\nusing a custom layout in a `UICollectionView`.\r\n\r\n#### How?\r\n\r\nOttran parses the image data as it is downloaded. As soon as it finds out the size and type of image,\r\nit stops the download. The downloaded data is below 60 KB in most cases.\r\n\r\n#### Install\r\n\r\n###### Installation with CocoaPods\r\n```objc\r\npod 'Ottran'\r\n```\r\n######                       (OR)\r\n\r\nJust copy and paste those Ottran.h(&).m files to your project.\r\n\r\n#### Usage\r\n\r\nThe only method you will be using is `scoutImageWithURI: andOttranCompletion:`, with the following full signature:\r\n\r\n```objc\r\n- (void)scoutImageWithURI:(NSString *)uri andOttranCompletion:(OttranCompletionBlock)completion;\r\n\r\n(^OttranCompletionBlock) (NSError *, CGSize, OttranImageType);\r\n```\r\n\r\nHere's an example:\r\n\r\n```objc\r\n    Ottran *anScouter = [[Ottran alloc] init];\r\n\r\n    [anScouter scoutImageWithURI:path andOttranCompletion:^(NSError *error, CGSize size, OttranImageType imageType) {\r\n            if (error) {\r\n                NSLog(@\"Error = %@\", error);\r\n            } else {\r\n            \tNSLog(@\"Image Size = %@\",NSStringFromCGSize(size));\r\n                switch (imageType) {\r\n                    case GIF: NSLog(@\"Image Type = GIF\"); break;\r\n                    case PNG: NSLog(@\"Image Type = PNG\"); break;\r\n                    case JPEG: NSLog(@\"Image Type = JPEG\"); break;\r\n                    case BMP: NSLog(@\"Image Type = BMP\"); break;\r\n                    case Unsupported: NSLog(@\"Image Type = UnSupported\"); break;\r\n                    default: break;\r\n                }\r\n            }\r\n        }];\r\n```\r\n\r\nIf the image is not successfully parsed, the error will contain more info about the reason.\r\nIn that case, the size is going to be `CGSizeZero` and the type `Unsupported`.\r\n\r\n- Error code **100**: Invalid URI parameter.\r\n- Error code **101**: Image is corrput or malformatted.\r\n- Error code **102**: Not an image or unsopported image format URL.\r\n\r\n#### Compatibility\r\n\r\n- iOS 6.0 and above.\r\n- Compiles with Xcode 5 and above.\r\n\r\n#### License\r\n\r\nSee LICENSE.\r\n","google":"UA-57378251-1","note":"Don't delete this file! It's used internally to help with page regeneration."}